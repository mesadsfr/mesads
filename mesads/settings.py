"""
Django settings for mesads project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import logging
import os
import socket
from pathlib import Path
import sys

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from dotenv import load_dotenv

load_dotenv()


def parse_env_bool(key, default):
    """Helper function to parse environment variable."""
    value = os.getenv(key)

    if value is None:
        return default
    elif value.lower() in ("yes", "true", "1", "t", "y"):
        return True
    elif value.lower() in ("no", "false", "0", "f", ""):
        return False

    raise ValueError(f'Invalid boolean value "{value}" for environment variable {key}')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = parse_env_bool("DEBUG", True)

# Only enable matomo on production
MESADS_STATS_ENABLED = not DEBUG

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

if DEBUG:
    SECRET_KEY = os.getenv(
        "SECRET_KEY",
        "django-insecure-#tx=c!1uiqr9*e^cz%u2_!7$rl$c4$sg!=m!n$5llbhnxebj@$",
    )
else:
    # SECRET_KEY is mandatory when DEBUG is False
    SECRET_KEY = os.environ["SECRET_KEY"]
    # Initialize sentry only in production
    if os.environ.get("SENTRY_DSN"):
        sentry_sdk.init(
            dsn=os.environ["SENTRY_DSN"],
            integrations=[DjangoIntegration(), LoggingIntegration(level=logging.ERROR)],
            traces_sample_rate=0.01,
            send_default_pii=True,
        )

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Upload to S3 in production, or if S3 is defined in debug mode
if not DEBUG or os.environ.get("AWS_S3_ENDPOINT_URL"):
    STORAGES["default"] = {
        # See documentation in s3storage.py to understand why we use this custom storage.
        "BACKEND": "mesads.s3storage.HackishS3Boto3Storage",
        "OPTIONS": {
            "bucket_name": os.environ["AWS_STORAGE_BUCKET_NAME"],
            "access_key": os.environ["AWS_S3_ACCESS_KEY_ID"],
            "secret_key": os.environ["AWS_S3_SECRET_ACCESS_KEY"],
            "endpoint_url": os.environ["AWS_S3_ENDPOINT_URL"],
        },
    }


ALLOWED_HOSTS = [part for part in os.getenv("ALLOWED_HOSTS", "").split(";") if part]

# In debug, allow any origin for unsafe (POST, PUT, DELETE) requests.
if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        "https://*.info",
        "https://*.com",
        "https://*.fr",
        "http://*.info",
        "http://*.com",
        "http://*.fr",
    ]


INSTALLED_APPS = [
    # According to django-autocomplete-light documentation, DAL moduels must be
    # installed before django.contrib.admin.
    # See: https://django-autocomplete-light.readthedocs.io/en/master/install.html
    "dal",
    "dal_select2",
    "dal_queryset_sequence",
    "django.contrib.admin",
    "django.contrib.auth",
    "mozilla_django_oidc",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_cron",
    "debug_toolbar",
    "django_registration",
    "reversion",
    "reversion_compare",
    "rest_framework",
    "rest_framework.authtoken",
    "django_cleanup.apps.CleanupConfig",
    "mjml",
    "markdownx",
    "mesads.app",
    "mesads.users",
    "mesads.fradm",
    "mesads.api",
    "mesads.vehicules_relais",
    "mesads.mesads_oidc",
]

CRON_CLASSES = [
    "mesads.app.crons.ImportDataForParis",
    "mesads.app.crons.DeleteOldUsers",
]

AUTH_USER_MODEL = "users.User"

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "mesads.middleware.BackwardCompatibilityURLMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "mesads.mesads_oidc.backends.OIDCAuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
]

if DEBUG:
    MIDDLEWARE.insert(0, "query_counter.middleware.DjangoQueryCounterMiddleware")

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

ROOT_URLCONF = "mesads.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "dist_webpack",
            BASE_DIR / "mesads/templates/django",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "mesads.context_processors.mesads_settings",
                "mesads.context_processors.user_roles",
            ],
        },
    },
]

WSGI_APPLICATION = "mesads.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "mesads"),
        "HOST": os.getenv("DB_HOST", "db"),
        "PORT": os.getenv("DB_PORT", "5432"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "mesads"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "mesads.users.validators.UppercaseValidator",
    },
    {
        "NAME": "mesads.users.validators.LowercaseValidator",
    },
    {
        "NAME": "mesads.users.validators.DigitValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "fr-FR"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_URL = "/auth/login/"

# Static configuration
STATIC_ROOT = BASE_DIR / "static"

STATICFILES_DIRS = [
    ("", BASE_DIR / "mesads/static"),
    ("", BASE_DIR / "dist_webpack"),
    ("@gouvfr", BASE_DIR / "node_modules/@gouvfr/dsfr/dist/"),
    ("alpinejs", BASE_DIR / "node_modules/alpinejs/dist/"),
    ("leaflet", BASE_DIR / "node_modules/leaflet/dist/"),
]

MEDIA_ROOT = BASE_DIR / "uploads"
MEDIA_URL = "/uploads/"

# Redirect to / after login/logout
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Connexion ProConnect (OIDC)
OIDC_RP_SIGN_ALGO = "RS256"
OIDC_RP_CLIENT_ID = os.getenv(
    "PROCONNECT_CLIENT_ID",
)
OIDC_RP_CLIENT_SECRET = os.getenv(
    "PROCONNECT_CLIENT_SECRET",
)
OIDC_RP_SCOPES = "openid email given_name usual_name uid siret idp_id"
OIDC_OP_JWKS_ENDPOINT = os.getenv("PROCONNECT_JWKS_ENDPOINT")
OIDC_OP_AUTHORIZATION_ENDPOINT = os.getenv(
    "PROCONNECT_AUTHORIZATION_ENDPOINT",
)
OIDC_OP_TOKEN_ENDPOINT = os.getenv("PROCONNECT_TOKEN_ENDPOINT")
OIDC_OP_USER_ENDPOINT = os.getenv("PROCONNECT_USER_ENDPOINT")
OIDC_OP_LOGOUT_ENDPOINT = os.getenv("PROCONNECT_SESSION_END")
OIDC_AUTH_REQUEST_EXTRA_PARAMS = {"acr_values": "eidas1"}
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 4 * 60 * 60
OIDC_STORE_ID_TOKEN = True
ALLOW_LOGOUT_GET_METHOD = True
# Setup INTERNAL_IPS for django-debug-toolbar.
if DEBUG:
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips] + [
        "127.0.0.1",
    ]

# Display toolbar if DEBUG is True
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG,
}

MESADS_CONTACT_EMAIL = "equipe@mesads.beta.gouv.fr"

DEFAULT_FROM_EMAIL = MESADS_CONTACT_EMAIL
SERVER_EMAIL = MESADS_CONTACT_EMAIL

# Configuration Mail
if DEBUG:
    EMAIL_HOST = os.getenv("EMAIL_HOST", "maildev")
    EMAIL_PORT = os.getenv("EMAIL_PORT", 25)
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
    EMAIL_USE_TLS = parse_env_bool("EMAIL_USE_TLS", False)
else:
    INSTALLED_APPS += ["anymail"]
    EMAIL_BACKEND = "anymail.backends.brevo.EmailBackend"
    ANYMAIL = {"BREVO_API_KEY": os.environ["BREVO_API_KEY"]}

# Add configuration below to log SQL queries to console
if parse_env_bool("LOGGING_ENABLED", False):
    LOGGING = {
        "version": 1,
        "filters": {
            "require_debug_true": {
                "()": "django.utils.log.RequireDebugTrue",
            }
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "filters": ["require_debug_true"],
                "class": "logging.StreamHandler",
            }
        },
        "loggers": {
            "django.db.backends": {
                "level": "DEBUG",
                "handlers": ["console"],
            }
        },
    }

# django-registration: maximum number of days to activate the account
ACCOUNT_ACTIVATION_DAYS = 14

# By default an exception is raised if you try to add an administrator from the
# admin page at
# http://localhost:9400/admin/app/adsmanageradministrator/<id>/change/ because
# too many form values are provided.
# We set a large value to avoid the issue.
DATA_UPLOAD_MAX_NUMBER_FIELDS = 2**16

INSEE_TOKEN = os.getenv("INSEE_TOKEN")

# Enable pagination, which is disabled by default.
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
}

MESADS_SENTRY_JS_URL = os.environ.get("SENTRY_JS_URL")

MJML_EXEC_CMD = BASE_DIR / "node_modules/.bin/mjml"


# Speed up unittests, see https://docs.djangoproject.com/en/5.2/topics/testing/overview/#speeding-up-the-tests
if "test" in sys.argv:
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
